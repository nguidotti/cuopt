# SPDX-FileCopyrightText: Copyright (c) 2021-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: build

on:
  push:
    branches:
      - "main"
    tags:
      - v[0-9][0-9].[0-9][0-9].[0-9][0-9]
  workflow_dispatch:
    inputs:
      branch:
        description: |
          branch: git branch the workflow run targets.
          Required even when 'sha' is provided because it is also used for organizing artifacts.
        required: true
        type: string
      date:
        description: "date: Date (YYYY-MM-DD) this run is for. Used to organize artifacts produced by nightly builds"
        required: true
        type: string
      sha:
        description: "sha: full git commit SHA to check out"
        required: true
        type: string
      build_type:
        description: "build_type: one of [branch, nightly, pull-request]"
        type: string
        default: nightly
      # Triggering 'test.yaml' from inside 'build.yaml' allows the use of the 'needs:' mechanism
      # to ensure tests only start runniing once the builds they need are complete.
      trigger-tests:
        description: |
          If 'true', trigger the test workflow after all builds complete.
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cpp-build:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-cpp-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      sha: ${{ inputs.sha }}
      script: ci/build_cpp.sh
  python-build:
    needs: [cpp-build]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-python-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      sha: ${{ inputs.sha }}
      script: ci/build_python.sh
  upload-conda:
    needs: [cpp-build, python-build]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-upload-packages.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      sha: ${{ inputs.sha }}
  wheel-build-cuopt-mps-parser:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_cuopt_mps_parser.sh
      package-name: cuopt_mps_parser
      package-type: python
      append-cuda-suffix: false
      # need 1 build per Python version and arch (but CUDA version doesn't matter so choose the latest)
      matrix_filter: 'group_by([.ARCH, (.PY_VER |split(".") | map(tonumber))])|map(max_by([(.CUDA_VER|split(".")|map(tonumber))]))'
  wheel-publish-cuopt-mps-parser:
    needs: wheel-build-cuopt-mps-parser
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: cuopt_mps_parser
      package-type: python
  wheel-build-libcuopt:
    needs: wheel-build-cuopt-mps-parser
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_libcuopt.sh
      package-name: libcuopt
      package-type: cpp
      matrix_filter: group_by([.ARCH, (.CUDA_VER|split(".")|map(tonumber)|.[0])]) | map(max_by(.PY_VER|split(".")|map(tonumber)))
  wheel-publish-libcuopt:
    needs: wheel-build-libcuopt
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: libcuopt
      package-type: cpp
  wheel-build-cuopt:
    needs: [wheel-build-cuopt-mps-parser, wheel-build-libcuopt]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_cuopt.sh
      package-name: cuopt
      package-type: python
  wheel-publish-cuopt:
    needs: wheel-build-cuopt
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: cuopt
      package-type: python
  wheel-build-cuopt-server:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_cuopt_server.sh
      package-name: cuopt_server
      package-type: python
      pure-wheel: true
      # Only need 1 package per CUDA major version. This selects "ARCH=amd64 + the latest supported Python, 1 job per major CUDA version".
      matrix_filter: map(select(.ARCH == "amd64")) | group_by(.CUDA_VER|split(".")|map(tonumber)|.[0]) | map(max_by([(.PY_VER|split(".")|map(tonumber)), (.CUDA_VER|split(".")|map(tonumber))]))
  wheel-publish-cuopt-server:
    needs: wheel-build-cuopt-server
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: cuopt_server
      package-type: python
  docs-build:
    needs: [python-build]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      node_type: "gpu-l4-latest-1"
      sha: ${{ inputs.sha }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      arch: "amd64"
      file_to_upload: "docs/cuopt/build/html/"
      artifact-name: "cuopt_docs"
      container_image: "rapidsai/ci-conda:25.12-latest"
      script: "ci/build_docs.sh"
  wheel-build-cuopt-sh-client:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_cuopt_sh_client.sh
      package-name: cuopt_sh_client
      package-type: python
      append-cuda-suffix: false
      pure-wheel: true
      # only need 1 build (noarch package): this selects amd64, oldest-supported Python, latest-supported CUDA
      matrix_filter: '[map(select(.ARCH == "amd64")) | min_by((.PY_VER | split(".") | map(tonumber)), (.CUDA_VER | split(".") | map(-tonumber)))]'
  wheel-publish-cuopt-sh-client:
    needs: wheel-build-cuopt-sh-client
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@main
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: cuopt_sh_client
      package-type: python
  tests:
    # Docker image build / tests aren't necessary for the 'test.yaml' workflow,
    # so 'test.yaml' can be triggered without waiting for those.
    needs:
      - upload-conda
      - wheel-publish-cuopt
      - wheel-publish-cuopt-mps-parser
      - wheel-publish-cuopt-server
      - wheel-publish-cuopt-sh-client
      - wheel-publish-libcuopt
    if: inputs.trigger-tests
    runs-on: ubuntu-latest
    # ref: https://docs.github.com/en/actions/reference/security/secure-use#use-an-intermediate-environment-variable
    env:
      GH_TOKEN: ${{ github.token }}
      INPUT_BRANCH: "${{ inputs.branch }}"
      INPUT_BUILD_TYPE: "${{ inputs.build_type }}"
      INPUT_DATE: "${{ inputs.date }}"
      INPUT_SHA: "${{ inputs.sha }}"
    steps:
      - name: trigger-test-workflow
        run: |
          # NOTE: '--ref' is the branch to pull the workflow file from, 'branch' input is the branch
          #       to pull the actual cuOpt source code from
          gh workflow run                       \
            --repo NVIDIA/cuopt                 \
            --ref "${{ github.ref }}"           \
            'test.yaml'                         \
            -f branch="${INPUT_BRANCH}"         \
            -f build_type="${INPUT_BUILD_TYPE}" \
            -f date="${INPUT_DATE}"             \
            -f sha="${INPUT_SHA}"

  build-images:
    needs:
      - wheel-publish-cuopt
      - wheel-publish-cuopt-server
      - wheel-publish-cuopt-sh-client
    uses: ./.github/workflows/build_test_publish_images.yaml
    secrets: inherit
    with:
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      build_type: ${{ inputs.build_type || 'branch' }}
